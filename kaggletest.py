# -*- coding: utf-8 -*-
"""KaggleTest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rlS3uk3-z1CBWdXZ68PgADrZ9X0uXySK
"""

##### Kaggle setup ##### 
!rm /root/.kaggle/kaggle.json
!pip uninstall kaggle
!pip install --user kaggle
!echo "{\"username\":\"sumanurawat\",\"key\":\"35356028f14b632983e77af616762244\"}" >> /root/.kaggle/kaggle.json
! /root/.local/bin/kaggle -h

##### Data Download #####
!rm -r asl-alphabet.zip
!/root/.local/bin/kaggle datasets download -d grassknoted/asl-alphabet
!unzip asl-alphabet.zip
!rm -r asl-alphabet.zip
!unzip -q asl_alphabet_train.zip
!rm -r asl_alphabet_test.zip
!rm -r asl_alphabet_train.zip

! pip install imutils

import matplotlib

##### THIS GIVES SOME WARNING #####
# matplotlib.use("Agg") 
##### THIS GIVES SOME WARNING #####

from keras.models import Sequential
from keras.layers.normalization import BatchNormalization
from keras.layers.convolutional import Conv2D
from keras.layers.convolutional import MaxPooling2D
from keras.layers.core import Activation
from keras.layers.core import Flatten
from keras.layers.core import Dropout
from keras.layers.core import Dense
from keras import backend as K 
# import the necessary packages

from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from keras.preprocessing.image import img_to_array
from sklearn.preprocessing import LabelBinarizer
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt

from imutils import paths
import numpy as np
import argparse
import random
import pickle
import os
import cv2

from imutils import paths

import tensorflow as tf
device_name = tf.test.gpu_device_name()
if device_name != '/device:GPU:0':
  raise SystemError('GPU device not found')
print('Found GPU at: {}'.format(device_name))

# initialize the number of epochs to train for, initial learning rate,
# batch size, and image dimensions
EPOCHS = 40
INIT_LR = 1e-3
BS = 32
IMAGE_DIMS = (32, 32, 3)
 
# initialize the data and labels
data = []
labels = []

##### IMPORT DRIVE PATH HERE #####
##### IMPORT DRIVE PATH HERE #####
##### IMPORT DRIVE PATH HERE #####
##### IMPORT DRIVE PATH HERE #####
##### IMPORT DRIVE PATH HERE #####
train_data_dir = "/content/asl_alphabet_train"
##### IMPORT DRIVE PATH HERE #####
##### IMPORT DRIVE PATH HERE #####
##### IMPORT DRIVE PATH HERE #####
##### IMPORT DRIVE PATH HERE #####
##### IMPORT DRIVE PATH HERE #####

# grab the image paths and randomly shuffle them
print("[INFO] loading images...")
imagePaths = sorted(list(paths.list_images(train_data_dir)))
random.seed(42)
random.shuffle(imagePaths)
print("[INFO] IMAGES LOADED")

imagePaths[0]

number_of_images = 0

# loop over the input images
for imagePath in imagePaths:
	# load the image, pre-process it, and store it in the data list
	image = cv2.imread(imagePath)
	image = cv2.resize(image, (IMAGE_DIMS[1], IMAGE_DIMS[0]))
	image = img_to_array(image)
	data.append(image)
 
	# extract the class label from the image path and update the
	# labels list
	label = imagePath.split(os.path.sep)[-2]
	labels.append(label)

	if (number_of_images%5000 == 0):
		print(number_of_images)
	number_of_images = number_of_images + 1

data = np.array(data, dtype="float") / 255.0

labels = np.array(labels)


print("[INFO] data matrix: {:.2f}MB".format(
	data.nbytes / (1024 * 1000.0)))



# binarize the labels
lb = LabelBinarizer()
labels = lb.fit_transform(labels)
 
# partition the data into training and testing splits using 80% of
# the data for training and the remaining 20% for testing
(trainX, testX, trainY, testY) = train_test_split(data,
	labels, test_size=0.2, random_state=42)

# construct the image generator for data augmentation
aug = ImageDataGenerator(rotation_range=25, width_shift_range=0.1,
	height_shift_range=0.1, shear_range=0.2, zoom_range=0.2,
	horizontal_flip=True, fill_mode="nearest")

# initialize the model
print("[INFO] compiling model...")


model = Sequential()
inputShape = (32, 32, 3)
chanDim = -1
 
# if we are using "channels first", update the input shape
# and channels dimension
if K.image_data_format() == "channels_first":
	inputShape = (depth, height, width)
	chanDim = 1

model.add(Conv2D(32, (3, 3), padding="same",input_shape=inputShape))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(MaxPooling2D(pool_size=(2,2)))
#model.add(MaxPooling2D(pool_size=(3,3)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(Conv2D(64, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
        

model.add(Conv2D(128, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(Conv2D(128, (3, 3), padding="same"))
model.add(Activation("relu"))
model.add(BatchNormalization(axis=chanDim))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))
        
model.add(Flatten())
model.add(Dense(1024))
model.add(Activation("relu"))
model.add(BatchNormalization())
model.add(Dropout(0.5))
 

model.add(Dense(29))
model.add(Activation("softmax"))
opt = Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS)
model.compile(loss="categorical_crossentropy", optimizer=opt,
	metrics=["accuracy"])

print("[INFO] compiling model...DONE!!!")

# train the network
print("[INFO] training network...")
H = model.fit_generator(
	aug.flow(trainX, trainY, batch_size=BS),
  validation_data=(testX, testY),
	steps_per_epoch=len(trainX) // BS,
	epochs=EPOCHS, verbose=1)

# model.save('/content/v2test_model.h5')

# from google.colab import files
# files.download('/content/v2test_model.h5')

# # plot the training loss and accuracy
# import matplotlib.pyplot as plt
# plt.style.use("ggplot")
# plt.figure()
# N = EPOCHS
# plt.plot(np.arange(0, N), H.history["loss"], label="train_loss")
# plt.plot(np.arange(0, N), H.history["val_loss"], label="val_loss")
# plt.plot(np.arange(0, N), H.history["acc"], label="train_acc")
# plt.plot(np.arange(0, N), H.history["val_acc"], label="val_acc")
# plt.title("Training Loss and Accuracy")
# plt.xlabel("Epoch #")
# plt.ylabel("Loss/Accuracy")
# plt.legend(loc="upper left")

# plt.savefig("/content/v2figureFile01.jpg", orientation='landcsape')
# plt.savefig("/content/v2figureFile02.jpg", orientation='potrait')
# plt.savefig("/content/v2figureFile03.png", orientation='landcsape')
# plt.savefig("/content/v2figureFile04.png", orientation='potrait')
# from google.colab import files
# files.download("/content/v2figureFile01.jpg")
# files.download("/content/v2figureFile02.jpg")
# files.download("/content/v2figureFile03.png")
# files.download("/content/v2figureFile04.png")

!pip install pydot

from keras.utils import plot_model
import pydot

model.summary()

plot_model(model, to_file='/content/model.png')
plot_model(model, to_file='/content/model_plot.png', show_shapes=True, show_layer_names=True)
print(model.summary())

from google.colab import files
files.download("/content/model.png")
files.download("/content/model_plot.png")

from keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img

datagen = ImageDataGenerator(
        rotation_range=40,
        width_shift_range=0.2,
        height_shift_range=0.2,
        shear_range=0.2,
        zoom_range=0.2,
        horizontal_flip=True,
        fill_mode='nearest')

img = load_img('/content/asl_alphabet_train/del/del619.jpg')  # this is a PIL image
x = img_to_array(img)  # this is a Numpy array with shape (3, 150, 150)
x = x.reshape((1,) + x.shape)  # this is a Numpy array with shape (1, 3, 150, 150)

# the .flow() command below generates batches of randomly transformed images
# and saves the results to the `preview/` directory
i = 0
for batch in datagen.flow(x, batch_size=1,
                          save_to_dir='/content', save_prefix='cat', save_format='jpeg'):
    i += 1
    if i > 20:
        break  # otherwise the generator would loop indefinitely

!ls

from google.colab import files
files.download("/content/cat_0_1088.jpeg")
files.download("/content/cat_0_1404.jpeg")
files.download("/content/cat_0_2208.jpeg")
files.download("/content/cat_0_2247.jpeg")
files.download("/content/cat_0_2675.jpeg")

files.download("/content/cat_0_2933.jpeg")
files.download("/content/cat_0_3222.jpeg")
files.download("/content/cat_0_324.jpeg")
files.download("/content/cat_0_3287.jpeg")
files.download("/content/cat_0_5326.jpeg")
files.download("/content/cat_0_5615.jpeg")


files.download("/content/cat_0_6133.jpeg")
files.download("/content/cat_0_6698.jpeg")
files.download("/content/cat_0_7399.jpeg")
files.download("/content/cat_0_7865.jpeg")
files.download("/content/cat_0_8495.jpeg")
files.download("/content/cat_0_9003.jpeg")


files.download("/content/cat_0_9005.jpeg")
files.download("/content/cat_0_9293.jpeg")
files.download("/content/cat_0_9374.jpeg")
files.download("/content/cat_0_9976.jpeg")

